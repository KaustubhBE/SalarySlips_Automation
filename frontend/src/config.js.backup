// config.js

import axios from 'axios';

// Detect if running in development
const isDevelopment = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';

// Default backend URL
const DEFAULT_BACKEND_URL = 'https://uatbackendadmin.bajajearths.com';

// Determine the base API URL
const getApiBaseUrl = () => {
    if (typeof window !== 'undefined') {
        const localBackendUrl = localStorage.getItem('localBackendUrl');
        if (localBackendUrl && isDevelopment) {
            return `${localBackendUrl}/api`;
        }
    }
    return `${DEFAULT_BACKEND_URL}/api`;
};

// Set local backend URL if not already set
if (typeof window !== 'undefined' && !localStorage.getItem('localBackendUrl')) {
    localStorage.setItem('localBackendUrl', DEFAULT_BACKEND_URL);
}

// Configure axios globally
axios.defaults.baseURL = getApiBaseUrl();
axios.defaults.withCredentials = true;
axios.defaults.headers.common['Content-Type'] = 'application/json';
axios.defaults.headers.common['Accept'] = 'application/json';
axios.defaults.timeout = 2 * 24 * 60 * 60 * 1000; // 2 days timeout

// Feature flags (optional)
export const FEATURES = {
    ENABLE_WHATSAPP: import.meta.env.VITE_ENABLE_WHATSAPP === 'true',
    ENABLE_EMAIL: import.meta.env.VITE_ENABLE_EMAIL === 'true',
    ENABLE_ERROR_REPORTING: import.meta.env.VITE_ENABLE_ERROR_REPORTING === 'true'
};

// Logging config
export const LOG_CONFIG = {
    LEVEL: import.meta.env.VITE_LOG_LEVEL || 'info'
};

// API config for `fetch`
export const API_CONFIG = {
    headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    },
    credentials: 'include',
    mode: 'cors'
};

// Get full API URL for an endpoint
export const getApiUrl = (endpoint) => {
    return `${getApiBaseUrl()}/${endpoint}`;
};

// Set backend URL dynamically
export const setLocalBackendUrl = (url) => {
    if (typeof window !== 'undefined') {
        localStorage.setItem('localBackendUrl', url);
    }
};

// Get current backend URL
export const getCurrentBackendUrl = () => {
    return getApiBaseUrl();
};

// Department and Services Configuration
export const DEPARTMENTS_CONFIG = {
  STORE: {
    key: 'store',
    name: 'Store',
    description: 'Store Department - Inventory Management',
    route: '/store',
    services: {
      INVENTORY: {
        key: 'inventory',
        name: 'Inventory',
        description: 'Manage inventory operations',
        permission: 'inventory'
      }
    }
  },
  MARKETING: {
    key: 'marketing',
    name: 'Marketing',
    description: 'Marketing Department - Marketing Campaigns and Analysis',
    route: '/marketing',
    services: {
      MARKETING_CAMPAIGNS: {
        key: 'marketing_campaigns',
        name: 'Marketing Campaigns',
        description: 'Manage marketing campaigns',
        permission: 'marketing_campaigns'
      }
    }
  },
  HUMANRESOURCE: {
    key: 'humanresource',
    name: 'Human Resource',
    description: 'Human Resource Department - Salary Processing and Employee Management',
    route: '/humanresource',
    services: {
      SALARY_PROCESSING: {
        key: 'salary_processing',
        name: 'Salary Processing',
        description: 'Process salary slips',
        subServices: {
          SINGLE_PROCESSING: {
            key: 'single_processing',
            name: 'Single Processing',
            description: 'Process individual salary slips',
            permission: 'single_processing'
          },
          BATCH_PROCESSING: {
            key: 'batch_processing',
            name: 'Batch Processing',
            description: 'Process multiple salary slips at once',
            permission: 'batch_processing'
          }
        }
      }
    }
  },
  ACCOUNTS: {
    key: 'accounts',
    name: 'Accounts',
    description: 'Accounts Department - Financial Management',
    route: '/accounts',
    services: {
      EXPENSE_MANAGEMENT: {
        key: 'expense_management',
        name: 'Expense Management',
        description: 'Manage expenses',
        permission: 'expense_management'
      }
    }
  },
  REPORTS_DEPARTMENT: {
    key: 'reports_department',
    name: 'Reports Department',
    description: 'Reports Department - Generate and manage reports',
    route: '/reports-department',
    services: {
      REACTOR_REPORTS: {
        key: 'reactor_reports',
        name: 'Reactor Reports',
        description: 'Generate reactor reports',
        permission: 'reports'
      },
      GENERAL_REPORTS: {
        key: 'general_reports',
        name: 'General Reports',
        description: 'Generate general reports',
        permission: 'reports'
      }
    }
  }
};

// Factory names
export const FACTORIES = {
  HEADOFFICE: 'HeadOffice',
  GULBARGA: 'Gulbarga',
  KERUR: 'Kerur',
  HUMNABAD: 'Humnabad',
  OMKAR: 'Omkar',
  PADMAVATI: 'Padmavati'
};

// All available permissions organized by factory and then by service
export const ALL_PERMISSIONS = {
  GENERAL: {
    REPORTS: 'reports',
    SETTINGS_ACCESS: 'settings_access',
    USER_MANAGEMENT: 'user_management',
    CAN_CREATE_ADMIN: 'can_create_admin'
  },
  [FACTORIES.GULBARGA]: {
  STORE: {
    INVENTORY: 'inventory'
  },
  HUMANRESOURCE: {
    SALARY_PROCESSING: {
      SINGLE_PROCESSING: 'single_processing',
      BATCH_PROCESSING: 'batch_processing',
    }
  },
  MARKETING: {
    MARKETING_CAMPAIGNS: 'marketing_campaigns'
  },
  ACCOUNTS: {
    EXPENSE_MANAGEMENT: 'expense_management'
  },
  REPORTS_DEPARTMENT: {
    REACTOR_REPORTS: 'reports',
    GENERAL_REPORTS: 'reports'
  }
},
  [FACTORIES.KERUR]: {
  STORE: {
    INVENTORY: 'inventory'
  },
  HUMANRESOURCE: {
    SALARY_PROCESSING: {
      SINGLE_PROCESSING: 'single_processing',
      BATCH_PROCESSING: 'batch_processing',
    }
  },
  MARKETING: {
    MARKETING_CAMPAIGNS: 'marketing_campaigns'
  },
  ACCOUNTS: {
    EXPENSE_MANAGEMENT: 'expense_management'
  },
  REPORTS_DEPARTMENT: {
    REACTOR_REPORTS: 'reports',
    GENERAL_REPORTS: 'reports'
  }
},
  [FACTORIES.HUMNABAD]: {
  STORE: {
    INVENTORY: 'inventory'
  },
  HUMANRESOURCE: {
    SALARY_PROCESSING: {
      SINGLE_PROCESSING: 'single_processing',
      BATCH_PROCESSING: 'batch_processing',
    }
  },
  MARKETING: {
    MARKETING_CAMPAIGNS: 'marketing_campaigns'
  },
  ACCOUNTS: {
    EXPENSE_MANAGEMENT: 'expense_management'
  },
  REPORTS_DEPARTMENT: {
    REACTOR_REPORTS: 'reports',
    GENERAL_REPORTS: 'reports'
  }
},
  [FACTORIES.OMKAR]: {
  STORE: {
    INVENTORY: 'inventory'
  },
  HUMANRESOURCE: {
    SALARY_PROCESSING: {
      SINGLE_PROCESSING: 'single_processing',
      BATCH_PROCESSING: 'batch_processing',
    }
  },
  MARKETING: {
    MARKETING_CAMPAIGNS: 'marketing_campaigns'
  },
  ACCOUNTS: {
    EXPENSE_MANAGEMENT: 'expense_management'
  },
  REPORTS_DEPARTMENT: {
    REACTOR_REPORTS: 'reports',
    GENERAL_REPORTS: 'reports'
  }
},
  [FACTORIES.PADMAVATI]: {
  STORE: {
    INVENTORY: 'inventory'
  },
  HUMANRESOURCE: {
    SALARY_PROCESSING: {
      SINGLE_PROCESSING: 'single_processing',
      BATCH_PROCESSING: 'batch_processing',
    }
  },
  MARKETING: {
    MARKETING_CAMPAIGNS: 'marketing_campaigns'
  },
  ACCOUNTS: {
    EXPENSE_MANAGEMENT: 'expense_management'
  },
  REPORTS_DEPARTMENT: {
    REACTOR_REPORTS: 'reports',
    GENERAL_REPORTS: 'reports'
  }
}
};

// Permission descriptions for tooltips
export const PERMISSION_DESCRIPTIONS = {
  [ALL_PERMISSIONS.GENERAL.REPORTS]: 'Access to all reports across departments',
  [ALL_PERMISSIONS.GENERAL.SETTINGS_ACCESS]: 'Access system settings',
  [ALL_PERMISSIONS.GENERAL.USER_MANAGEMENT]: 'Manage users and roles',
  [ALL_PERMISSIONS.GENERAL.CAN_CREATE_ADMIN]: 'Create admin users',
  
  // Factory-specific permissions
  [ALL_PERMISSIONS[FACTORIES.GULBARGA].STORE.INVENTORY]: 'Manage inventory operations in Gulbarga factory',
  [ALL_PERMISSIONS[FACTORIES.GULBARGA].HUMANRESOURCE.SALARY_PROCESSING.SINGLE_PROCESSING]: 'Process individual salary slips in Gulbarga factory',
  [ALL_PERMISSIONS[FACTORIES.GULBARGA].HUMANRESOURCE.SALARY_PROCESSING.BATCH_PROCESSING]: 'Process multiple salary slips at once in Gulbarga factory',
  [ALL_PERMISSIONS[FACTORIES.GULBARGA].MARKETING.MARKETING_CAMPAIGNS]: 'Manage marketing campaigns in Gulbarga factory',
  [ALL_PERMISSIONS[FACTORIES.GULBARGA].ACCOUNTS.EXPENSE_MANAGEMENT]: 'Manage expenses in Gulbarga factory',
  [ALL_PERMISSIONS[FACTORIES.GULBARGA].REPORTS_DEPARTMENT.REACTOR_REPORTS]: 'Generate reactor reports in Gulbarga factory',
  [ALL_PERMISSIONS[FACTORIES.GULBARGA].REPORTS_DEPARTMENT.GENERAL_REPORTS]: 'Generate general reports in Gulbarga factory',
  
  [ALL_PERMISSIONS[FACTORIES.KERUR].STORE.INVENTORY]: 'Manage inventory operations in Kerur factory',
  [ALL_PERMISSIONS[FACTORIES.KERUR].HUMANRESOURCE.SALARY_PROCESSING.SINGLE_PROCESSING]: 'Process individual salary slips in Kerur factory',
  [ALL_PERMISSIONS[FACTORIES.KERUR].HUMANRESOURCE.SALARY_PROCESSING.BATCH_PROCESSING]: 'Process multiple salary slips at once in Kerur factory',
  [ALL_PERMISSIONS[FACTORIES.KERUR].MARKETING.MARKETING_CAMPAIGNS]: 'Manage marketing campaigns in Kerur factory',
  [ALL_PERMISSIONS[FACTORIES.KERUR].ACCOUNTS.EXPENSE_MANAGEMENT]: 'Manage expenses in Kerur factory',
  [ALL_PERMISSIONS[FACTORIES.KERUR].REPORTS_DEPARTMENT.REACTOR_REPORTS]: 'Generate reactor reports in Kerur factory',
  [ALL_PERMISSIONS[FACTORIES.KERUR].REPORTS_DEPARTMENT.GENERAL_REPORTS]: 'Generate general reports in Kerur factory',
  
  [ALL_PERMISSIONS[FACTORIES.HUMNABAD].STORE.INVENTORY]: 'Manage inventory operations in Humnabad factory',
  [ALL_PERMISSIONS[FACTORIES.HUMNABAD].HUMANRESOURCE.SALARY_PROCESSING.SINGLE_PROCESSING]: 'Process individual salary slips in Humnabad factory',
  [ALL_PERMISSIONS[FACTORIES.HUMNABAD].HUMANRESOURCE.SALARY_PROCESSING.BATCH_PROCESSING]: 'Process multiple salary slips at once in Humnabad factory',
  [ALL_PERMISSIONS[FACTORIES.HUMNABAD].MARKETING.MARKETING_CAMPAIGNS]: 'Manage marketing campaigns in Humnabad factory',
  [ALL_PERMISSIONS[FACTORIES.HUMNABAD].ACCOUNTS.EXPENSE_MANAGEMENT]: 'Manage expenses in Humnabad factory',
  [ALL_PERMISSIONS[FACTORIES.HUMNABAD].REPORTS_DEPARTMENT.REACTOR_REPORTS]: 'Generate reactor reports in Humnabad factory',
  [ALL_PERMISSIONS[FACTORIES.HUMNABAD].REPORTS_DEPARTMENT.GENERAL_REPORTS]: 'Generate general reports in Humnabad factory',
  
  [ALL_PERMISSIONS[FACTORIES.OMKAR].STORE.INVENTORY]: 'Manage inventory operations in Omkar factory',
  [ALL_PERMISSIONS[FACTORIES.OMKAR].HUMANRESOURCE.SALARY_PROCESSING.SINGLE_PROCESSING]: 'Process individual salary slips in Omkar factory',
  [ALL_PERMISSIONS[FACTORIES.OMKAR].HUMANRESOURCE.SALARY_PROCESSING.BATCH_PROCESSING]: 'Process multiple salary slips at once in Omkar factory',
  [ALL_PERMISSIONS[FACTORIES.OMKAR].MARKETING.MARKETING_CAMPAIGNS]: 'Manage marketing campaigns in Omkar factory',
  [ALL_PERMISSIONS[FACTORIES.OMKAR].ACCOUNTS.EXPENSE_MANAGEMENT]: 'Manage expenses in Omkar factory',
  [ALL_PERMISSIONS[FACTORIES.OMKAR].REPORTS_DEPARTMENT.REACTOR_REPORTS]: 'Generate reactor reports in Omkar factory',
  [ALL_PERMISSIONS[FACTORIES.OMKAR].REPORTS_DEPARTMENT.GENERAL_REPORTS]: 'Generate general reports in Omkar factory',
  
  [ALL_PERMISSIONS[FACTORIES.PADMAVATI].STORE.INVENTORY]: 'Manage inventory operations in Padmavati factory',
  [ALL_PERMISSIONS[FACTORIES.PADMAVATI].HUMANRESOURCE.SALARY_PROCESSING.SINGLE_PROCESSING]: 'Process individual salary slips in Padmavati factory',
  [ALL_PERMISSIONS[FACTORIES.PADMAVATI].HUMANRESOURCE.SALARY_PROCESSING.BATCH_PROCESSING]: 'Process multiple salary slips at once in Padmavati factory',
  [ALL_PERMISSIONS[FACTORIES.PADMAVATI].MARKETING.MARKETING_CAMPAIGNS]: 'Manage marketing campaigns in Padmavati factory',
  [ALL_PERMISSIONS[FACTORIES.PADMAVATI].ACCOUNTS.EXPENSE_MANAGEMENT]: 'Manage expenses in Padmavati factory',
  [ALL_PERMISSIONS[FACTORIES.PADMAVATI].REPORTS_DEPARTMENT.REACTOR_REPORTS]: 'Generate reactor reports in Padmavati factory',
  [ALL_PERMISSIONS[FACTORIES.PADMAVATI].REPORTS_DEPARTMENT.GENERAL_REPORTS]: 'Generate general reports in Padmavati factory'
};

// Default permissions for each factory and department combination
export const FACTORY_DEPARTMENT_DEFAULT_PERMISSIONS = {
  [FACTORIES.GULBARGA]: {
    [DEPARTMENTS_CONFIG.STORE.key]: {
      [ALL_PERMISSIONS[FACTORIES.GULBARGA].STORE.INVENTORY]: true
    },
    [DEPARTMENTS_CONFIG.MARKETING.key]: {
      [ALL_PERMISSIONS[FACTORIES.GULBARGA].MARKETING.MARKETING_CAMPAIGNS]: true
    },
    [DEPARTMENTS_CONFIG.HUMANRESOURCE.key]: {
      [ALL_PERMISSIONS[FACTORIES.GULBARGA].HUMANRESOURCE.SALARY_PROCESSING.SINGLE_PROCESSING]: true,
      [ALL_PERMISSIONS[FACTORIES.GULBARGA].HUMANRESOURCE.SALARY_PROCESSING.BATCH_PROCESSING]: true
    },
    [DEPARTMENTS_CONFIG.ACCOUNTS.key]: {
      [ALL_PERMISSIONS[FACTORIES.GULBARGA].ACCOUNTS.EXPENSE_MANAGEMENT]: true
    },
    [DEPARTMENTS_CONFIG.REPORTS_DEPARTMENT.key]: {
      [ALL_PERMISSIONS[FACTORIES.GULBARGA].REPORTS_DEPARTMENT.REACTOR_REPORTS]: true,
      [ALL_PERMISSIONS[FACTORIES.GULBARGA].REPORTS_DEPARTMENT.GENERAL_REPORTS]: true
    }
  },
  [FACTORIES.KERUR]: {
    [DEPARTMENTS_CONFIG.STORE.key]: {
      [ALL_PERMISSIONS[FACTORIES.KERUR].STORE.INVENTORY]: true
    },
    [DEPARTMENTS_CONFIG.MARKETING.key]: {
      [ALL_PERMISSIONS[FACTORIES.KERUR].MARKETING.MARKETING_CAMPAIGNS]: true
    },
    [DEPARTMENTS_CONFIG.HUMANRESOURCE.key]: {
      [ALL_PERMISSIONS[FACTORIES.KERUR].HUMANRESOURCE.SALARY_PROCESSING.SINGLE_PROCESSING]: true,
      [ALL_PERMISSIONS[FACTORIES.KERUR].HUMANRESOURCE.SALARY_PROCESSING.BATCH_PROCESSING]: true
    },
    [DEPARTMENTS_CONFIG.ACCOUNTS.key]: {
      [ALL_PERMISSIONS[FACTORIES.KERUR].ACCOUNTS.EXPENSE_MANAGEMENT]: true
    },
    [DEPARTMENTS_CONFIG.REPORTS_DEPARTMENT.key]: {
      [ALL_PERMISSIONS[FACTORIES.KERUR].REPORTS_DEPARTMENT.REACTOR_REPORTS]: true,
      [ALL_PERMISSIONS[FACTORIES.KERUR].REPORTS_DEPARTMENT.GENERAL_REPORTS]: true
    }
  },
  [FACTORIES.HUMNABAD]: {
    [DEPARTMENTS_CONFIG.STORE.key]: {
      [ALL_PERMISSIONS[FACTORIES.HUMNABAD].STORE.INVENTORY]: true
    },
    [DEPARTMENTS_CONFIG.MARKETING.key]: {
      [ALL_PERMISSIONS[FACTORIES.HUMNABAD].MARKETING.MARKETING_CAMPAIGNS]: true
    },
    [DEPARTMENTS_CONFIG.HUMANRESOURCE.key]: {
      [ALL_PERMISSIONS[FACTORIES.HUMNABAD].HUMANRESOURCE.SALARY_PROCESSING.SINGLE_PROCESSING]: true,
      [ALL_PERMISSIONS[FACTORIES.HUMNABAD].HUMANRESOURCE.SALARY_PROCESSING.BATCH_PROCESSING]: true
    },
    [DEPARTMENTS_CONFIG.ACCOUNTS.key]: {
      [ALL_PERMISSIONS[FACTORIES.HUMNABAD].ACCOUNTS.EXPENSE_MANAGEMENT]: true
    },
    [DEPARTMENTS_CONFIG.REPORTS_DEPARTMENT.key]: {
      [ALL_PERMISSIONS[FACTORIES.HUMNABAD].REPORTS_DEPARTMENT.REACTOR_REPORTS]: true,
      [ALL_PERMISSIONS[FACTORIES.HUMNABAD].REPORTS_DEPARTMENT.GENERAL_REPORTS]: true
    }
  },
  [FACTORIES.OMKAR]: {
    [DEPARTMENTS_CONFIG.STORE.key]: {
      [ALL_PERMISSIONS[FACTORIES.OMKAR].STORE.INVENTORY]: true
    },
    [DEPARTMENTS_CONFIG.MARKETING.key]: {
      [ALL_PERMISSIONS[FACTORIES.OMKAR].MARKETING.MARKETING_CAMPAIGNS]: true
    },
    [DEPARTMENTS_CONFIG.HUMANRESOURCE.key]: {
      [ALL_PERMISSIONS[FACTORIES.OMKAR].HUMANRESOURCE.SALARY_PROCESSING.SINGLE_PROCESSING]: true,
      [ALL_PERMISSIONS[FACTORIES.OMKAR].HUMANRESOURCE.SALARY_PROCESSING.BATCH_PROCESSING]: true
    },
    [DEPARTMENTS_CONFIG.ACCOUNTS.key]: {
      [ALL_PERMISSIONS[FACTORIES.OMKAR].ACCOUNTS.EXPENSE_MANAGEMENT]: true
    },
    [DEPARTMENTS_CONFIG.REPORTS_DEPARTMENT.key]: {
      [ALL_PERMISSIONS[FACTORIES.OMKAR].REPORTS_DEPARTMENT.REACTOR_REPORTS]: true,
      [ALL_PERMISSIONS[FACTORIES.OMKAR].REPORTS_DEPARTMENT.GENERAL_REPORTS]: true
    }
  },
  [FACTORIES.PADMAVATI]: {
    [DEPARTMENTS_CONFIG.STORE.key]: {
      [ALL_PERMISSIONS[FACTORIES.PADMAVATI].STORE.INVENTORY]: true
    },
    [DEPARTMENTS_CONFIG.MARKETING.key]: {
      [ALL_PERMISSIONS[FACTORIES.PADMAVATI].MARKETING.MARKETING_CAMPAIGNS]: true
    },
    [DEPARTMENTS_CONFIG.HUMANRESOURCE.key]: {
      [ALL_PERMISSIONS[FACTORIES.PADMAVATI].HUMANRESOURCE.SALARY_PROCESSING.SINGLE_PROCESSING]: true,
      [ALL_PERMISSIONS[FACTORIES.PADMAVATI].HUMANRESOURCE.SALARY_PROCESSING.BATCH_PROCESSING]: true
    },
    [DEPARTMENTS_CONFIG.ACCOUNTS.key]: {
      [ALL_PERMISSIONS[FACTORIES.PADMAVATI].ACCOUNTS.EXPENSE_MANAGEMENT]: true
    },
    [DEPARTMENTS_CONFIG.REPORTS_DEPARTMENT.key]: {
      [ALL_PERMISSIONS[FACTORIES.PADMAVATI].REPORTS_DEPARTMENT.REACTOR_REPORTS]: true,
      [ALL_PERMISSIONS[FACTORIES.PADMAVATI].REPORTS_DEPARTMENT.GENERAL_REPORTS]: true
    }
  }
};

// Legacy department default permissions (for backward compatibility)
export const DEPARTMENT_DEFAULT_PERMISSIONS = {
  [DEPARTMENTS_CONFIG.STORE.key]: {
    [ALL_PERMISSIONS.GENERAL.REPORTS]: false
  },
  [DEPARTMENTS_CONFIG.MARKETING.key]: {
    [ALL_PERMISSIONS.GENERAL.REPORTS]: false
  },
  [DEPARTMENTS_CONFIG.HUMANRESOURCE.key]: {
    [ALL_PERMISSIONS.GENERAL.REPORTS]: false
  },
  [DEPARTMENTS_CONFIG.ACCOUNTS.key]: {
    [ALL_PERMISSIONS.GENERAL.REPORTS]: false
  },
  [DEPARTMENTS_CONFIG.REPORTS_DEPARTMENT.key]: {
    [ALL_PERMISSIONS.GENERAL.REPORTS]: true
  }
};

// Helper functions for factories
export const getFactoryByKey = (key) => {
  return Object.values(FACTORIES).find(factory => factory === key);
};

export const getAllFactories = () => {
  return Object.values(FACTORIES);
};

export const getFactoryKeys = () => {
  return Object.keys(FACTORIES);
};

export const getFactoryNames = () => {
  return Object.values(FACTORIES);
};

// Helper functions for departments
export const getDepartmentByKey = (key) => {
  return Object.values(DEPARTMENTS_CONFIG).find(dept => dept.key === key);
};

export const getAllDepartments = () => {
  return Object.values(DEPARTMENTS_CONFIG);
};

export const getDepartmentKeys = () => {
  return Object.values(DEPARTMENTS_CONFIG).map(dept => dept.key);
};

export const getDepartmentNames = () => {
  return Object.values(DEPARTMENTS_CONFIG).map(dept => dept.name);
};

// Helper functions for factory-department combinations
export const getFactoryDepartmentPermissions = (factoryKey, departmentKey) => {
  const factory = FACTORY_DEPARTMENT_DEFAULT_PERMISSIONS[factoryKey];
  if (!factory) return {};
  
  const department = factory[departmentKey];
  return department || {};
};

export const getAllFactoryDepartmentCombinations = () => {
  const combinations = [];
  Object.keys(FACTORY_DEPARTMENT_DEFAULT_PERMISSIONS).forEach(factoryKey => {
    Object.keys(FACTORY_DEPARTMENT_DEFAULT_PERMISSIONS[factoryKey]).forEach(departmentKey => {
      combinations.push({
        factory: factoryKey,
        department: departmentKey,
        permissions: FACTORY_DEPARTMENT_DEFAULT_PERMISSIONS[factoryKey][departmentKey]
      });
    });
  });
  return combinations;
};

export const getDefaultPermissionsForFactoryDepartment = (factoryKey, departmentKey) => {
  const factory = FACTORY_DEPARTMENT_DEFAULT_PERMISSIONS[factoryKey];
  if (!factory) return {};
  
  const department = factory[departmentKey];
  return department || {};
};

export const getDefaultPermissionsForFactory = (factoryKey) => {
  const factory = FACTORY_DEPARTMENT_DEFAULT_PERMISSIONS[factoryKey];
  if (!factory) return {};
  
  const allPermissions = {};
  Object.values(factory).forEach(departmentPermissions => {
    Object.assign(allPermissions, departmentPermissions);
  });
  
  return allPermissions;
};

// Helper functions for services
export const getServiceByKey = (deptKey, serviceKey) => {
  const department = getDepartmentByKey(deptKey);
  if (!department || !department.services) return null;
  
  return Object.values(department.services).find(service => service.key === serviceKey);
};

export const getAllServicesForDepartment = (deptKey) => {
  const department = getDepartmentByKey(deptKey);
  return department ? Object.values(department.services) : [];
};

export const getAllPermissions = () => {
  const permissions = {};
  
  Object.values(DEPARTMENTS_CONFIG).forEach(dept => {
    if (dept.services) {
      Object.values(dept.services).forEach(service => {
        if (service.permission) {
          permissions[service.permission] = true;
        }
        if (service.subServices) {
          Object.values(service.subServices).forEach(subService => {
            if (subService.permission) {
              permissions[subService.permission] = true;
            }
          });
        }
      });
    }
  });
  
  return permissions;
};

// Super admin gets all permissions
export const SUPER_ADMIN_PERMISSIONS = Object.keys(ALL_PERMISSIONS).reduce((acc, categoryKey) => {
  const category = ALL_PERMISSIONS[categoryKey];
  
  if (categoryKey === 'GENERAL') {
    // Handle general permissions
  Object.values(category).forEach(permission => {
      acc[permission] = true;
    });
  } else {
    // Handle factory-specific permissions
    Object.values(category).forEach(department => {
      if (typeof department === 'object') {
        Object.values(department).forEach(service => {
          if (typeof service === 'object') {
            Object.values(service).forEach(permission => {
    if (typeof permission === 'object') {
      Object.values(permission).forEach(nestedPerm => {
        acc[nestedPerm] = true;
      });
    } else {
      acc[permission] = true;
    }
  });
          } else {
            acc[service] = true;
          }
        });
      } else {
        acc[department] = true;
      }
    });
  }
  
  return acc;
}, {});

// RBAC Helper Functions
export const hasPermission = (userPermissions, permission) => {
  if (!userPermissions || !permission) return false;
  return userPermissions[permission] === true;
};

export const hasAnyPermission = (userPermissions, permissions) => {
  if (!userPermissions || !permissions) return false;
  return permissions.some(permission => hasPermission(userPermissions, permission));
};

export const hasAllPermissions = (userPermissions, permissions) => {
  if (!userPermissions || !permissions) return false;
  return permissions.every(permission => hasPermission(userPermissions, permission));
};

export const canAccessDepartment = (userRole, userPermissions, departmentKey, factoryKey = null) => {
  // Super admin can access everything
  if (userRole === 'super-admin') return true;
  
  // Admin can access everything (for now, can be restricted later)
  if (userRole === 'admin') return true;
  
  // For regular users, check department-specific permissions
  if (userRole === 'user') {
    const deptConfig = Object.values(DEPARTMENTS_CONFIG).find(dept => dept.key === departmentKey);
    
    if (!deptConfig || !deptConfig.services) return false;
    
    // If factory is specified, check factory-specific permissions
    if (factoryKey) {
      const factoryPermissions = getFactoryDepartmentPermissions(factoryKey, departmentKey);
      return Object.keys(factoryPermissions).some(permission => 
        hasPermission(userPermissions, permission)
      );
    }
    
    // Check if user has any permission for this department's services (legacy check)
    return Object.values(deptConfig.services).some(service => {
      if (service.permission && hasPermission(userPermissions, service.permission)) return true;
      if (service.subServices) {
        return Object.values(service.subServices).some(subService => 
          subService.permission && hasPermission(userPermissions, subService.permission)
        );
      }
      return false;
    });
  }
  
  return false;
};

export const canAccessFactoryDepartment = (userRole, userPermissions, factoryKey, departmentKey) => {
  // Super admin can access everything
  if (userRole === 'super-admin') return true;
  
  // Admin can access everything (for now, can be restricted later)
  if (userRole === 'admin') return true;
  
  // For regular users, check factory-department specific permissions
  if (userRole === 'user') {
    const factoryPermissions = getFactoryDepartmentPermissions(factoryKey, departmentKey);
    return Object.keys(factoryPermissions).some(permission => 
      hasPermission(userPermissions, permission)
    );
  }
  
  return false;
};

export const getAccessibleDepartments = (userRole, userPermissions) => {
  if (userRole === 'super-admin' || userRole === 'admin') {
    return getAllDepartments();
  }
  
  if (userRole === 'user') {
    return getAllDepartments().filter(dept => 
      canAccessDepartment(userRole, userPermissions, dept.key)
    );
  }
  
  return [];
};

export const getAccessibleFactoryDepartments = (userRole, userPermissions) => {
  if (userRole === 'super-admin' || userRole === 'admin') {
    return getAllFactoryDepartmentCombinations();
  }
  
  if (userRole === 'user') {
    return getAllFactoryDepartmentCombinations().filter(combo => 
      canAccessFactoryDepartment(userRole, userPermissions, combo.factory, combo.department)
    );
  }
  
  return [];
};

export const getAccessibleFactories = (userRole, userPermissions) => {
  if (userRole === 'super-admin' || userRole === 'admin') {
    return getAllFactories();
  }
  
  if (userRole === 'user') {
    const accessibleCombinations = getAccessibleFactoryDepartments(userRole, userPermissions);
    const uniqueFactories = [...new Set(accessibleCombinations.map(combo => combo.factory))];
    return uniqueFactories;
  }
  
  return [];
};

export const canEditUser = (currentUserRole, currentUserPermissions, targetUserRole) => {
  // Super admin can edit all users
  if (currentUserRole === 'super-admin') return true;
  
  // Admin can edit users if they have user_management permission
  if (currentUserRole === 'admin' && hasPermission(currentUserPermissions, 'user_management')) {
    // Admin can edit regular users and other admins (but not super-admins)
    return targetUserRole !== 'super-admin';
  }
  
  // Regular users cannot edit other users
  return false;
};

export const canCreateUser = (currentUserRole, currentUserPermissions) => {
  // Super admin can create all users
  if (currentUserRole === 'super-admin') return true;
  
  // Admin can create regular users if they have user_management permission
  if (currentUserRole === 'admin' && hasPermission(currentUserPermissions, 'user_management')) return true;
  
  return false;
};

// Factory-specific permission checking functions
export const hasFactoryPermission = (userRole, userPermissions, factoryKey, permission) => {
  // Super admin has all permissions
  if (userRole === 'super-admin') return true;
  
  // Admin has all permissions (can be restricted later)
  if (userRole === 'admin') {
    return hasPermission(userPermissions, permission);
  };
  
  // For regular users, check specific factory permission
  if (userRole === 'user') {
    return hasPermission(userPermissions, permission);
  }
  
  return false;
};

export const canAccessFactoryService = (userRole, userPermissions, factoryKey, servicePermission) => {
  // Super admin can access everything
  if (userRole === 'super-admin') return true;
  
  // Admin can access everything (can be restricted later)
  if (userRole === 'admin'){
    return hasPermission(userPermissions, servicePermission);
  } 
  // For regular users, check if they have the specific permission
  if (userRole === 'user') {
    return hasPermission(userPermissions, servicePermission);
  }
  
  return false;
};

export const getFactoryServicePermission = (factoryKey, serviceType) => {
  // Map service types to their corresponding permissions in the factory
  const servicePermissionMap = {
    'single_processing': ALL_PERMISSIONS[factoryKey]?.HUMANRESOURCE?.SALARY_PROCESSING?.SINGLE_PROCESSING,
    'batch_processing': ALL_PERMISSIONS[factoryKey]?.HUMANRESOURCE?.SALARY_PROCESSING?.BATCH_PROCESSING,
    'inventory': ALL_PERMISSIONS[factoryKey]?.STORE?.INVENTORY,
    'reports': ALL_PERMISSIONS[factoryKey]?.REPORTS_DEPARTMENT?.GENERAL_REPORTS,
    'reactor_reports': ALL_PERMISSIONS[factoryKey]?.REPORTS_DEPARTMENT?.REACTOR_REPORTS,
    'marketing_campaigns': ALL_PERMISSIONS[factoryKey]?.MARKETING?.MARKETING_CAMPAIGNS,
    'expense_management': ALL_PERMISSIONS[factoryKey]?.ACCOUNTS?.EXPENSE_MANAGEMENT
  };
  
  return servicePermissionMap[serviceType];
};

export const canAccessFactoryRoute = (userRole, userPermissions, factoryKey, routeType) => {
  const permission = getFactoryServicePermission(factoryKey, routeType);
  return canAccessFactoryService(userRole, userPermissions, factoryKey, permission);
};

// Common API endpoints
export const ENDPOINTS = {
    // Auth
    GOOGLE_AUTH: 'auth/google',
    GOOGLE_CALLBACK: 'auth/google/callback',
    LOGOUT: 'auth/logout',
    AUTH_STATUS: 'auth/status',
    CHANGE_PASSWORD: 'auth/change-password',

    // Salary Slip
    SINGLE_SLIP: 'generate-salary-slip-single',
    BATCH_SLIPS: 'generate-salary-slips-batch',

    // User Management
    GET_USERS: 'get_users',
    ADD_USER: 'add_user',
    DELETE_USER: 'delete_user',
    UPDATE_ROLE: 'update_role',
    UPDATE_USER: 'update_user',
    UPDATE_PERMISSIONS: 'update_permissions',
    UPDATE_APP_PASSWORD: 'update_app_password',

    // WhatsApp Authentication
    WHATSAPP_LOGIN: 'whatsapp-login',
    WHATSAPP_STATUS: 'whatsapp-status',
    WHATSAPP_LOGOUT: 'whatsapp-logout',
    WHATSAPP_SEND_OTP: 'whatsapp-send-otp',
    WHATSAPP_VERIFY_OTP: 'whatsapp-verify-otp',
    WHATSAPP_FORCE_NEW_SESSION: 'whatsapp-force-new-session',

    // Logs
    GET_LOGS: 'get-logs',

    // Misc
    HOME: '',
    HEALTH: 'health',
    PROCESS_SINGLE: 'process_single',
    PROCESS_BATCH: 'process_batch'
};

// API call with fetch
export const makeApiCall = async (endpoint, options = {}) => {
    const defaultOptions = {
        credentials: 'include',
        mode: 'cors',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
    };

    const mergedOptions = {
        ...defaultOptions,
        ...options,
        credentials: 'include',
        mode: 'cors',
        headers: {
            ...defaultOptions.headers,
            ...(options.headers || {})
        }
    };

    try {
        const response = await fetch(getApiUrl(endpoint), mergedOptions);
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(errorText || `HTTP error! status: ${response.status}`);
        }

        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
            return await response.json();
        }

        return await response.text();
    } catch (error) {
        console.error('API call failed:', error);
        throw error;
    }
};

// Export fetch with defaults
export const configuredFetch = (url, options = {}) => {
    const finalOptions = {
        ...API_CONFIG,
        ...options,
        headers: {
            ...API_CONFIG.headers,
            ...options.headers
        }
    };
    return fetch(url, finalOptions);
};

// Export everything as default
export default {
    getApiUrl,
    makeApiCall,
    ENDPOINTS
};
